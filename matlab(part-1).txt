a = imread('cartoon.png');
subplot(1,1,1);
imshow(a);
title('Original Image');

gray_img = rgb2gray(a);
subplot(1,1,1);
imshow(gray_img);
title('Grayscale Image');

J = histeq(a);
imshow(J);

bw_img = imbinarize(gray_img);
subplot(1,1,1);
imshow(bw_img);
title('Binary Image');

imhist(gray_img);
title('Image Histogram');

imfinfo('cartoon.png')



imshowpair(a,J,'montage')
axis off



figure
imhist(a,64)

figure
imhist(J,64)

b = imread('invoice.png');
imshow(b);
title('Original Image');

gray_img = rgb2gray(b);
imshow(gray_img);
title('Grayscale Image');

k = histeq(b);
imshow(k);

bw_img = imbinarize(gray_img);
imshow(bw_img);
title('Binary Image');

imhist(gray_img);
title('Image Histogram');

imfinfo('invoice.png')

imshowpair(b,k,'montage')
axis off

BW = imread('invoice.png');
se = strel('line',11,90)
BW2 = imdilate(BW,se);
imshow(BW), title('Original')

figure, imshow(BW2), title('Dilated')

originalBW = imread('invoice.png');
se = strel('line',11,90);
erodedBW = imerode(originalBW,se)

figure
imshow(originalBW)

G = imread('invoice.png');
imshow(G)
title('Original Image')

% Convert to grayscale
gray_img = rgb2gray(G);
imshow(gray_img);
title('Grayscale Image');

% gray_img = medfilt2(gray_img);
 BW = imbinarize(gray_img, 'adaptive');

% Remove small objects and fill holes
 BW = bwareaopen(BW, 50);
 BW = imfill(BW, 'holes');

% function [bbox, label] = extract_invoice_number(BW)
% % This function extracts the invoice number region from a binary image.
% 
% % Label the connected components in the binary image
% cc = bwconncomp(BW);
% 
% % Compute the properties of each connected component
% props = regionprops(cc, 'BoundingBox', 'Area');
% 
% % Find the connected component with the largest area (which is likely the invoice number region)
% max_area = 0;
% max_idx = 0;
% for i = 1:length(props)
%     if props(i).Area > max_area
%         max_area = props(i).Area;
%         max_idx = i;
%     end
% end
% 
% % Extract the bounding box and label of the invoice number region
% bbox = round(props(max_idx).BoundingBox);
% label = 'Invoice Number';
% end

% Read the invoice image
I = imread('invoice_data.png');
gray_img = rgb2gray(I);
imshow(gray_img);
title('Grayscale Image');

xlim([22 707])
ylim([62 816])
imageSize = size(gray_img);
disp(['Image dimensions: ', num2str(imageSize(1)), ' x ', num2str(imageSize(2))]);

cc = bwconncomp(BW);

% Convert the image to grayscale and threshold it to obtain a binary image
BW = imbinarize(gray_img);
[L, num] = bwlabel(BW);

binaryImage = imbinarize(gray_img);
labeledImage = bwlabel(binaryImage);
props = regionprops(labeledImage == 1);
props(1)

features = [cat(1, props.Area), cat(1, props.Centroid), cat(1, props.BoundingBox)];

 data = rand(100, 2);
[idx, C] = kmeans(data, 3);

% Convert the connected components to a label matrix
label_matrix = labelmatrix(cc);

% % Separate the connected components based on the clustering result
% for i = 1:num_clusters
%     % Create a binary mask for this cluster
%     binary_mask = label_matrix == i;
% 
%     % Apply the binary mask to the original image
%     component_image = image .* binary_mask;
% 
%     % Display the component image
%     figure;
%     imshow(component_image);
% end

% Separate the connected components based on the clustering results
bw_labels = bwlabel(BW);
for i = 1:cc.NumObjects
    if idx(i) == 1
        % Component belongs to cluster 1
        bw_labels(cc.PixelIdxList{i}) = 1;
    elseif idx(i) == 2
        % Component belongs to cluster 2
        bw_labels(cc.PixelIdxList{i}) = 2;
    else
        % Component belongs to cluster 3
        bw_labels(cc.PixelIdxList{i}) = 3;
    end
end

% Display the labeled image
imshow(label2rgb(bw_labels));

% % Preallocate an array of size 10x10
% A = zeros(10, 10);
% 
% % Fill the array with random numbers
% for i = 1:10
%     for j = 1:10
%         A(i, j) = rand();
%     end
% end
% 
% % Display the final array
% disp(A);
% 
% 

% % Initialize an empty array
% B = [];
% 
% % Preallocate the array to avoid warnings
% n = 100;
% B = zeros(n, 1);
% 
% % Loop over some data and append to the array
% for i = 1:n
%     x = rand();
%     B(i) = x;
% end
% 
% % Display the final array
% disp(B);

% % Perform clustering on the feature matrix
% num_clusters = 3;
% [idx, centroids] = kmeans(features, num_clusters);
% 
% % Convert the connected components to a label matrix
% label_matrix = labelmatrix(CC);
% 
% % Separate the connected components based on the clustering result
% for i = 1:num_clusters
%     % Create a binary mask for this cluster
%     binary_mask = label_matrix == i;
% 
%     % Apply the binary mask to the original image
%     component_image = bwimage .* binary_mask;
% 
%     % Display the component image
%     figure;
%     imshow(component_image);
% end
% 

% 
% for i = 1:7
%     if idx(i) == 1
%         % Component belongs to cluster 1
%         bw_labels(cc.PixelIdxList{i}) = 1;
%     elseif idx(i) == 2
%         % Component belongs to cluster 2
%         bw_labels(cc.PixelIdxList{i}) = 2;
%     else
%         % Component belongs to cluster 3
%         bw_labels(cc.PixelIdxList{i}) = 3;
%     end
% end





