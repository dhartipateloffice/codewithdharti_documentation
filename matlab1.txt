The "in" is what the gray level range of your input image is. The out is where your want that range to be mapped to in the display. For example, if your image is low contrast and all the interesting stuff happens in the range 100-110, and you want to display it so that 100 shows up at 0 and 110 shows up as 255, you'd use imadjust(imageArray, [100 110], [0 255]);
Of if you wanted 100 to appear as 25 and 110 to appear as 200 you'd do imadjust(imageArray, [100 110], [25 200]). Anything less than 100 would show up as 25 and anything brighter would show up as 200.

The imhist function creates a histogram plot by defining n equally spaced bins, each representing a range of data values, and then calculating the number of pixels within each range.

imread(‘filename’)
subplot(row, column, position)
imshow(‘filename’)
 rgb2gray(‘filename’) 
im2bw(‘filename’)
imadjust(‘filename’) 
 imhist(‘filename’) 
Imfinfo(‘filename with location’) 
[height, width, colour_planes] = size(‘filename’)
colormap('spring')

 Integrating cutting-edge technologies such as optical character recognition (OCR), supervised machine learning, and automated analytics that incorporate natural language processing into a seamless process will require time and technical expertise.
sophisticated machine learning algorithms 
 
algorithms are able to,
generate summaries of documents;
identify topics;
judge the sentiment (positive or negative) of prose; 
identify key terms,
provisions,or clauses within documents;
identify clusters of documents requiring similar actions.

% Read the image
I = imread('invoice_image.jpg');

% Convert to grayscale
Igray = rgb2gray(I);

% Enhance the image by applying a median filter
Igray = medfilt2(Igray);

% Threshold the image using adaptive thresholding
BW = imbinarize(Igray, 'adaptive');

% Remove small objects and fill holes
BW = bwareaopen(BW, 50);
BW = imfill(BW, 'holes');
------------------
% Label the connected components in the image
cc = bwconncomp(BW);
-----------------------------------------------------
% Compute the properties of each connected component
props = regionprops(cc, 'BoundingBox', 'Centroid', 'Area');

% Define the features to be used for clustering (in this case, centroid location)
features = [cat(1, props.Centroid)];

% Apply k-means clustering to group the connected components
num_clusters = 2;
idx = kmeans(features, num_clusters);

% Separate the connected components based on the clustering results
for i = 1:num_clusters
    % Get the connected components in the current cluster
    cc_cluster = cc.PixelIdxList(idx == i);
    
    % Create a binary mask for the current cluster
    BW_cluster = zeros(size(BW));
    for j = 1:length(cc_cluster)
        BW_cluster(cc_cluster{j}) = 1;
    end
    
    % Extract the invoice number and due date regions based on the cluster index
    if i == 1
        % Invoice number
        [invoice_bbox, invoice_label] = extract_invoice_number(BW_cluster);
    else
        % Due date
        [due_date_bbox, due_date_label] = extract_due_date(BW_cluster);
    end
end
--------------
% Define the regular expressions for invoice number and due date
invoice_regex = '\d{4}-\d{3}-\d{5}';
due_date_regex = '\d{1,2}\/\d{1,2}\/\d{4}';

% Extract the text from the invoice number and due date regions
invoice_text = ocr(Igray(invoice_bbox(2):invoice_bbox(2)+invoice_bbox(4), invoice_bbox(1):invoice_bbox(1)+invoice_bbox(3)), 'CharacterSet', '0123456789-', 'TextLayout', 'Block');
due_date_text = ocr(Igray(due_date_bbox(2):due_date_bbox(2)+due_date_bbox(4), due_date_bbox(1):due_date_bbox(1)+due_date_bbox(3)), 'CharacterSet', '0123456789/', 'TextLayout', 'Block');

% Search for the invoice number and due date in the extracted text
invoice_number = extractBetween(invoice_text.Text, regexp(invoice_text.Text, invoice_regex), regexp(invoice_text.Text, invoice_regex) + 11);
due_date = extractBetween(due_date_text.Text, regexp(due_date_text.Text, due_date_regex), regexp(due_date_text.Text, due_date_regex) + 9);
--------------------
function [bbox, label] = extract_invoice_number(BW)
% This function extracts the invoice number region from a binary image.

% Label the connected components in the binary image
cc = bwconncomp(BW);

% Compute the properties of each connected component
props = regionprops(cc, 'BoundingBox', 'Area');

% Find the connected component with the largest area (which is likely the invoice number region)
max_area = 0;
max_idx = 0;
for i = 1:length(props)
    if props(i).Area > max_area
        max_area = props(i).Area;
        max_idx = i;
    end
end

% Extract the bounding box and label of the invoice number region
bbox = round(props(max_idx).BoundingBox);
label = 'Invoice Number';
end
-----------------
% Read the invoice image
I = imread('invoice.jpg');

% Convert the image to grayscale and threshold it to obtain a binary image
BW = imbinarize(rgb2gray(I), 'adaptive');

% Extract the invoice number region
[bbox, label] = extract_invoice_number(BW);

% Display the invoice image with the invoice number region highlighted
figure;
imshow(I);
hold on;
rectangle('Position', bbox, 'EdgeColor', 'r', 'LineWidth', 2);
text(bbox(1)+5, bbox(2)+15, label, 'Color', 'r', 'FontSize', 12, 'FontWeight', 'bold');

function [bbox, label] = extract_invoice_number(BW)
% This function extracts the invoice number region from a binary image.

% Label the connected components in the binary image
cc = bwconncomp(BW);

% Compute the properties of each connected component
props = regionprops(cc, 'BoundingBox', 'Area');

% Find the connected component with the largest area (which is likely the invoice number region)
max_area = 0;
max_idx = 0;
for i = 1:length(props)
    if props(i).Area > max_area
        max_area = props(i).Area;
        max_idx = i;
    end
end

% Extract the bounding box and label of the invoice number region
bbox = round(props(max_idx).BoundingBox);
label = 'Invoice Number';
end
----------------
% Read the invoice image
I = imread('invoice.jpg');

% Convert the image to grayscale and threshold it to obtain a binary image
BW = imbinarize(rgb2gray(I), 'adaptive');

% Extract the due date region
[bbox, label] = extract_due_date(BW);

% Display the invoice image with the due date region highlighted
figure;
imshow(I);
hold on;
rectangle('Position', bbox, 'EdgeColor', 'g', 'LineWidth', 2);
text(bbox(1)+5, bbox(2)+15, label, 'Color', 'g', 'FontSize', 12, 'FontWeight', 'bold');

function [bbox, label] = extract_due_date(BW)
% This function extracts the due date region from a binary image.

% Label the connected components in the binary image
cc = bwconncomp(BW);

% Compute the properties of each connected component
props = regionprops(cc, 'BoundingBox', 'Area', 'Centroid');

% Filter the connected components based on area and centroid
candidate_regions = [];
for i = 1:length(props)
    if props(i).Area > 100 && props(i).Centroid(2) > 300 && props(i).Centroid(2) < 450
        candidate_regions = [candidate_regions, i];
    end
end

% If no candidate regions were found, return empty values
if isempty(candidate_regions)
    bbox = [];
    label = '';
    return
end

% Select the candidate region closest to the center of the image
center = [size(BW, 2)/2, size(BW, 1)/2];
min_dist = inf;
min_idx = 0;
for i = 1:length(candidate_regions)
    dist = norm(props(candidate_regions(i)).Centroid - center);
    if dist < min_dist
        min_dist = dist;
        min_idx = candidate_regions(i);
    end
end

% Extract the bounding box and label of the due date region
bbox = round(props(min_idx).BoundingBox);
label = 'Due Date';
end
-------------------------

% Filter the connected components based on area and centroid
candidate_regions = [];
for i = 1:length(props)
    if props(i).Area > 100 && props(i).Centroid(2) > 300 && props(i).Centroid(2) < 450
        candidate_regions = [candidate_regions, i];
    end
end

% If no candidate regions were found, return empty values
if isempty(candidate_regions)
    bbox = [];
    label = '';
    return
end

% Select the candidate region closest to the center of the image
center = [size(BW, 2)/2, size(BW, 1)/2];
min_dist = inf;
min_idx = 0;
for i = 1:length(candidate_regions)
    dist = norm(props(candidate_regions(i)).Centroid - center);
    if dist < min_dist
        min_dist = dist;
        min_idx = candidate_regions(i);
    end
end

% Extract the bounding box and label of the due date region
bbox = round(props(min_idx).BoundingBox);
label = 'Due Date';
end





